"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[736],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(n),h=r,d=m["".concat(p,".").concat(h)]||m[h]||c[h]||o;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8114:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"Getting Started",id:"getting-started",slug:"/getting-started",sidebar_position:2},p=void 0,l={unversionedId:"tutorials/getting-started",id:"tutorials/getting-started",title:"Getting Started",description:"Browser support",source:"@site/docs/tutorials/Getting Started.mdx",sourceDirName:"tutorials",slug:"/getting-started",permalink:"/egjs-axes/docs/getting-started",editUrl:"https://github.com/naver/egjs-axes/edit/master/packages/demo/docs/tutorials/Getting Started.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Getting Started",id:"getting-started",slug:"/getting-started",sidebar_position:2},sidebar:"docs",previous:{title:"Installation",permalink:"/egjs-axes/docs/"}},u={},c=[{value:"Browser support",id:"browser-support",level:3},{value:"Quick steps to use:",id:"quick-steps-to-use",level:3},{value:"1. Set up your HTML",id:"1-set-up-your-html",level:4},{value:"2. Load files or import library",id:"2-load-files-or-import-library",level:4},{value:"ES5",id:"es5",level:5},{value:"ES6+",id:"es6",level:5},{value:"3. Initialize Axes",id:"3-initialize-axes",level:4},{value:"4. Attach event handlers",id:"4-attach-event-handlers",level:4},{value:"5. Initialize InputTypes to use",id:"5-initialize-inputtypes-to-use",level:4},{value:"6. Connect eg.Axes and InputTypes",id:"6-connect-egaxes-and-inputtypes",level:4},{value:"7. Enjoy!",id:"7-enjoy",level:4}],m={toc:c};function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"browser-support"},"Browser support"),(0,o.kt)("p",null,"IE 10+, latest of Chrome/FF/Safari, iOS 7+ and Android 2.3+ (except 3.x)"),(0,o.kt)("h3",{id:"quick-steps-to-use"},"Quick steps to use:"),(0,o.kt)("h4",{id:"1-set-up-your-html"},"1. Set up your HTML"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<div id="area"></div>\n')),(0,o.kt)("h4",{id:"2-load-files-or-import-library"},"2. Load files or import library"),(0,o.kt)("h5",{id:"es5"},"ES5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<script src="//naver.github.io/egjs-axes/release/latest/axes.pkgd.js"><\/script>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var Axes = eg.Axes;\nvar PanInput = Axes.PanInput;\nvar PinchInput = Axes.PinchInput;\nvar WheelInput = Axes.WheelInput;\nvar MoveKeyInput = Axes.MoveKeyInput;\n")),(0,o.kt)("h5",{id:"es6"},"ES6+"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import Axes, {PanInput, PinchInput, WheelInput, MoveKeyInput} from "@egjs/axes";\n')),(0,o.kt)("h4",{id:"3-initialize-axes"},"3. Initialize Axes"),(0,o.kt)("p",null,"Initialize Axes. specify the axis to be used.\nThe key of the axis specifies the name to use as the logical virtual coordinate system."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// create eg.Axes with option\nconst axes = new Axes({\n  something1: { range: [0, 100] },\n  something2: { range: [0, 100] },\n  somethingN: { range: [-200, 200] }\n});\n")),(0,o.kt)("h4",{id:"4-attach-event-handlers"},"4. Attach event handlers"),(0,o.kt)("p",null,"Axes provides six events."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/Axes#event-hold"},"hold")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/Axes#event-change"},"change")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/Axes#event-release"},"release")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/Axes#event-animationStart"},"animationStart")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/Axes#event-animationEnd"},"animationEnd")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/Axes#event-finish"},"finish"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'axes.on({\n "change": evt => /* ... */\n});\n')),(0,o.kt)("h4",{id:"5-initialize-inputtypes-to-use"},"5. Initialize InputTypes to use"),(0,o.kt)("p",null,"Create an InputType to associate with the axis of eg.Axes."),(0,o.kt)("p",null,"Axes provides five inputTypes."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/PanInput"},"PanInput")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/RotatePanInput"},"RotatePanInput")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/PinchInput"},"PinchInput")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/WheelInput"},"WheelInput")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/api/MoveKeyInput"},"MoveKeyInput"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// create inputTypes to use\nconst panInput = new PanInput("#area");\nconst wheelInput = new WheelInput("#wArea");\nconst pinchInput = new PinchInput("#pArea");\nconst movekeyInput = new MoveKeyInput("#mArea");\n')),(0,o.kt)("h4",{id:"6-connect-egaxes-and-inputtypes"},"6. Connect eg.Axes and InputTypes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * [PanInput] When the mouse or touchscreen is down and moved.\n *\n * Connect the \'something2\' axis to the mouse or touchscreen x position and\n * connect the \'somethingN\' axis to the mouse or touchscreen y position.\n **/\naxes.connect(["something2", "somethingN"], panInput); // or axes.connect("something2 somethingN", panInput);\n// Connect only one \'something1\' axis to the mouse or touchscreen x position.\naxes.connect(["something1"], panInput); // or axes.connect("something1", panInput);\n// Connect only one \'something2\' axis to the mouse or touchscreen y position.\naxes.connect(["", "something2"], panInput); // or axes.connect(" something2", panInput);\n\n// [WheelInput] Connect \'something1\' axis when the mousewheel is moved.\naxes.connect(["something1"], wheelInput); // or axes.connect("something1", wheelInput);\n\n// [PinchInput] Connect \'something2\' axis when two pointers are moving toward (zoom-in) or away from each other (zoom-out).\naxes.connect(["something2"], pinchInput); // or axes.connect("something2", pinchInput);\n\n// Connect \'something1\' axis to left-right arrow key and \'something2\' axis to top-bottom key\naxes.connect(["something1", "something2"], movekeyInput); // or axes.connect("something1 something2", panInput);\n')),(0,o.kt)("h4",{id:"7-enjoy"},"7. Enjoy!"),(0,o.kt)("p",null,"You can change the value of the axis through touch screen, mouse or anything else."))}h.isMDXComponent=!0}}]);